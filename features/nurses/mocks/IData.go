// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	nurses "github.com/final-project-alterra/hospital-management-system-api/features/nurses"
	mock "github.com/stretchr/testify/mock"
)

// IData is an autogenerated mock type for the IData type
type IData struct {
	mock.Mock
}

// DeleteNurseById provides a mock function with given fields: id, updatedBy
func (_m *IData) DeleteNurseById(id int, updatedBy int) error {
	ret := _m.Called(id, updatedBy)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int) error); ok {
		r0 = rf(id, updatedBy)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertNurse provides a mock function with given fields: nurse
func (_m *IData) InsertNurse(nurse nurses.NurseCore) error {
	ret := _m.Called(nurse)

	var r0 error
	if rf, ok := ret.Get(0).(func(nurses.NurseCore) error); ok {
		r0 = rf(nurse)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SelectNurseByEmail provides a mock function with given fields: email
func (_m *IData) SelectNurseByEmail(email string) (nurses.NurseCore, error) {
	ret := _m.Called(email)

	var r0 nurses.NurseCore
	if rf, ok := ret.Get(0).(func(string) nurses.NurseCore); ok {
		r0 = rf(email)
	} else {
		r0 = ret.Get(0).(nurses.NurseCore)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectNurseById provides a mock function with given fields: id
func (_m *IData) SelectNurseById(id int) (nurses.NurseCore, error) {
	ret := _m.Called(id)

	var r0 nurses.NurseCore
	if rf, ok := ret.Get(0).(func(int) nurses.NurseCore); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(nurses.NurseCore)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectNurses provides a mock function with given fields:
func (_m *IData) SelectNurses() ([]nurses.NurseCore, error) {
	ret := _m.Called()

	var r0 []nurses.NurseCore
	if rf, ok := ret.Get(0).(func() []nurses.NurseCore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]nurses.NurseCore)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectNursesByIds provides a mock function with given fields: ids
func (_m *IData) SelectNursesByIds(ids []int) ([]nurses.NurseCore, error) {
	ret := _m.Called(ids)

	var r0 []nurses.NurseCore
	if rf, ok := ret.Get(0).(func([]int) []nurses.NurseCore); ok {
		r0 = rf(ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]nurses.NurseCore)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]int) error); ok {
		r1 = rf(ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateNurse provides a mock function with given fields: nurse
func (_m *IData) UpdateNurse(nurse nurses.NurseCore) error {
	ret := _m.Called(nurse)

	var r0 error
	if rf, ok := ret.Get(0).(func(nurses.NurseCore) error); ok {
		r0 = rf(nurse)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
