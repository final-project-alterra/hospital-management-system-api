// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	doctors "github.com/final-project-alterra/hospital-management-system-api/features/doctors"
	mock "github.com/stretchr/testify/mock"
)

// IBusiness is an autogenerated mock type for the IBusiness type
type IBusiness struct {
	mock.Mock
}

// CreateDoctor provides a mock function with given fields: doctor
func (_m *IBusiness) CreateDoctor(doctor doctors.DoctorCore) error {
	ret := _m.Called(doctor)

	var r0 error
	if rf, ok := ret.Get(0).(func(doctors.DoctorCore) error); ok {
		r0 = rf(doctor)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateRoom provides a mock function with given fields: room
func (_m *IBusiness) CreateRoom(room doctors.RoomCore) error {
	ret := _m.Called(room)

	var r0 error
	if rf, ok := ret.Get(0).(func(doctors.RoomCore) error); ok {
		r0 = rf(room)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateSpeciality provides a mock function with given fields: speciality
func (_m *IBusiness) CreateSpeciality(speciality doctors.SpecialityCore) error {
	ret := _m.Called(speciality)

	var r0 error
	if rf, ok := ret.Get(0).(func(doctors.SpecialityCore) error); ok {
		r0 = rf(speciality)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EditDoctor provides a mock function with given fields: doctor
func (_m *IBusiness) EditDoctor(doctor doctors.DoctorCore) error {
	ret := _m.Called(doctor)

	var r0 error
	if rf, ok := ret.Get(0).(func(doctors.DoctorCore) error); ok {
		r0 = rf(doctor)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EditDoctorPassword provides a mock function with given fields: id, updatedBy, oldPassword, newPassword
func (_m *IBusiness) EditDoctorPassword(id int, updatedBy int, oldPassword string, newPassword string) error {
	ret := _m.Called(id, updatedBy, oldPassword, newPassword)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int, string, string) error); ok {
		r0 = rf(id, updatedBy, oldPassword, newPassword)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EditRoom provides a mock function with given fields: room
func (_m *IBusiness) EditRoom(room doctors.RoomCore) error {
	ret := _m.Called(room)

	var r0 error
	if rf, ok := ret.Get(0).(func(doctors.RoomCore) error); ok {
		r0 = rf(room)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EditSpeciality provides a mock function with given fields: speciality
func (_m *IBusiness) EditSpeciality(speciality doctors.SpecialityCore) error {
	ret := _m.Called(speciality)

	var r0 error
	if rf, ok := ret.Get(0).(func(doctors.SpecialityCore) error); ok {
		r0 = rf(speciality)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindDoctorByEmail provides a mock function with given fields: email
func (_m *IBusiness) FindDoctorByEmail(email string) (doctors.DoctorCore, error) {
	ret := _m.Called(email)

	var r0 doctors.DoctorCore
	if rf, ok := ret.Get(0).(func(string) doctors.DoctorCore); ok {
		r0 = rf(email)
	} else {
		r0 = ret.Get(0).(doctors.DoctorCore)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindDoctorById provides a mock function with given fields: id
func (_m *IBusiness) FindDoctorById(id int) (doctors.DoctorCore, error) {
	ret := _m.Called(id)

	var r0 doctors.DoctorCore
	if rf, ok := ret.Get(0).(func(int) doctors.DoctorCore); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(doctors.DoctorCore)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindDoctors provides a mock function with given fields:
func (_m *IBusiness) FindDoctors() ([]doctors.DoctorCore, error) {
	ret := _m.Called()

	var r0 []doctors.DoctorCore
	if rf, ok := ret.Get(0).(func() []doctors.DoctorCore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]doctors.DoctorCore)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindDoctosrByIds provides a mock function with given fields: ids
func (_m *IBusiness) FindDoctosrByIds(ids []int) ([]doctors.DoctorCore, error) {
	ret := _m.Called(ids)

	var r0 []doctors.DoctorCore
	if rf, ok := ret.Get(0).(func([]int) []doctors.DoctorCore); ok {
		r0 = rf(ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]doctors.DoctorCore)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]int) error); ok {
		r1 = rf(ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindRooms provides a mock function with given fields:
func (_m *IBusiness) FindRooms() ([]doctors.RoomCore, error) {
	ret := _m.Called()

	var r0 []doctors.RoomCore
	if rf, ok := ret.Get(0).(func() []doctors.RoomCore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]doctors.RoomCore)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindSpecialities provides a mock function with given fields:
func (_m *IBusiness) FindSpecialities() ([]doctors.SpecialityCore, error) {
	ret := _m.Called()

	var r0 []doctors.SpecialityCore
	if rf, ok := ret.Get(0).(func() []doctors.SpecialityCore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]doctors.SpecialityCore)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindSpecialityById provides a mock function with given fields: id
func (_m *IBusiness) FindSpecialityById(id int) (doctors.SpecialityCore, error) {
	ret := _m.Called(id)

	var r0 doctors.SpecialityCore
	if rf, ok := ret.Get(0).(func(int) doctors.SpecialityCore); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(doctors.SpecialityCore)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveDoctorById provides a mock function with given fields: id, updatedBy
func (_m *IBusiness) RemoveDoctorById(id int, updatedBy int) error {
	ret := _m.Called(id, updatedBy)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int) error); ok {
		r0 = rf(id, updatedBy)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveRoomById provides a mock function with given fields: id
func (_m *IBusiness) RemoveRoomById(id int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveSpeciality provides a mock function with given fields: id
func (_m *IBusiness) RemoveSpeciality(id int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
