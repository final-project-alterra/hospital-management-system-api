// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	doctors "github.com/final-project-alterra/hospital-management-system-api/features/doctors"
	mock "github.com/stretchr/testify/mock"
)

// IData is an autogenerated mock type for the IData type
type IData struct {
	mock.Mock
}

// DeleteDoctorById provides a mock function with given fields: id, updatedBy
func (_m *IData) DeleteDoctorById(id int, updatedBy int) error {
	ret := _m.Called(id, updatedBy)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int) error); ok {
		r0 = rf(id, updatedBy)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteRoomById provides a mock function with given fields: id
func (_m *IData) DeleteRoomById(id int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteSpecialityId provides a mock function with given fields: id
func (_m *IData) DeleteSpecialityId(id int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertDoctor provides a mock function with given fields: doctor
func (_m *IData) InsertDoctor(doctor doctors.DoctorCore) error {
	ret := _m.Called(doctor)

	var r0 error
	if rf, ok := ret.Get(0).(func(doctors.DoctorCore) error); ok {
		r0 = rf(doctor)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertRoom provides a mock function with given fields: room
func (_m *IData) InsertRoom(room doctors.RoomCore) error {
	ret := _m.Called(room)

	var r0 error
	if rf, ok := ret.Get(0).(func(doctors.RoomCore) error); ok {
		r0 = rf(room)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertSpeciality provides a mock function with given fields: speciality
func (_m *IData) InsertSpeciality(speciality doctors.SpecialityCore) error {
	ret := _m.Called(speciality)

	var r0 error
	if rf, ok := ret.Get(0).(func(doctors.SpecialityCore) error); ok {
		r0 = rf(speciality)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SelectDoctorByEmail provides a mock function with given fields: email
func (_m *IData) SelectDoctorByEmail(email string) (doctors.DoctorCore, error) {
	ret := _m.Called(email)

	var r0 doctors.DoctorCore
	if rf, ok := ret.Get(0).(func(string) doctors.DoctorCore); ok {
		r0 = rf(email)
	} else {
		r0 = ret.Get(0).(doctors.DoctorCore)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectDoctorById provides a mock function with given fields: id
func (_m *IData) SelectDoctorById(id int) (doctors.DoctorCore, error) {
	ret := _m.Called(id)

	var r0 doctors.DoctorCore
	if rf, ok := ret.Get(0).(func(int) doctors.DoctorCore); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(doctors.DoctorCore)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectDoctors provides a mock function with given fields:
func (_m *IData) SelectDoctors() ([]doctors.DoctorCore, error) {
	ret := _m.Called()

	var r0 []doctors.DoctorCore
	if rf, ok := ret.Get(0).(func() []doctors.DoctorCore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]doctors.DoctorCore)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectDoctorsByIds provides a mock function with given fields: ids
func (_m *IData) SelectDoctorsByIds(ids []int) ([]doctors.DoctorCore, error) {
	ret := _m.Called(ids)

	var r0 []doctors.DoctorCore
	if rf, ok := ret.Get(0).(func([]int) []doctors.DoctorCore); ok {
		r0 = rf(ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]doctors.DoctorCore)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]int) error); ok {
		r1 = rf(ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectDoctorsByRoomId provides a mock function with given fields: id
func (_m *IData) SelectDoctorsByRoomId(id int) ([]doctors.DoctorCore, error) {
	ret := _m.Called(id)

	var r0 []doctors.DoctorCore
	if rf, ok := ret.Get(0).(func(int) []doctors.DoctorCore); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]doctors.DoctorCore)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectDoctorsBySpecialityId provides a mock function with given fields: id
func (_m *IData) SelectDoctorsBySpecialityId(id int) ([]doctors.DoctorCore, error) {
	ret := _m.Called(id)

	var r0 []doctors.DoctorCore
	if rf, ok := ret.Get(0).(func(int) []doctors.DoctorCore); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]doctors.DoctorCore)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectRoomByCode provides a mock function with given fields: code
func (_m *IData) SelectRoomByCode(code string) (doctors.RoomCore, error) {
	ret := _m.Called(code)

	var r0 doctors.RoomCore
	if rf, ok := ret.Get(0).(func(string) doctors.RoomCore); ok {
		r0 = rf(code)
	} else {
		r0 = ret.Get(0).(doctors.RoomCore)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectRoomById provides a mock function with given fields: id
func (_m *IData) SelectRoomById(id int) (doctors.RoomCore, error) {
	ret := _m.Called(id)

	var r0 doctors.RoomCore
	if rf, ok := ret.Get(0).(func(int) doctors.RoomCore); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(doctors.RoomCore)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectRooms provides a mock function with given fields:
func (_m *IData) SelectRooms() ([]doctors.RoomCore, error) {
	ret := _m.Called()

	var r0 []doctors.RoomCore
	if rf, ok := ret.Get(0).(func() []doctors.RoomCore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]doctors.RoomCore)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectSpecialities provides a mock function with given fields:
func (_m *IData) SelectSpecialities() ([]doctors.SpecialityCore, error) {
	ret := _m.Called()

	var r0 []doctors.SpecialityCore
	if rf, ok := ret.Get(0).(func() []doctors.SpecialityCore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]doctors.SpecialityCore)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectSpecialityById provides a mock function with given fields: id
func (_m *IData) SelectSpecialityById(id int) (doctors.SpecialityCore, error) {
	ret := _m.Called(id)

	var r0 doctors.SpecialityCore
	if rf, ok := ret.Get(0).(func(int) doctors.SpecialityCore); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(doctors.SpecialityCore)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDoctor provides a mock function with given fields: doctor
func (_m *IData) UpdateDoctor(doctor doctors.DoctorCore) error {
	ret := _m.Called(doctor)

	var r0 error
	if rf, ok := ret.Get(0).(func(doctors.DoctorCore) error); ok {
		r0 = rf(doctor)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateRoom provides a mock function with given fields: room
func (_m *IData) UpdateRoom(room doctors.RoomCore) error {
	ret := _m.Called(room)

	var r0 error
	if rf, ok := ret.Get(0).(func(doctors.RoomCore) error); ok {
		r0 = rf(room)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateSpeciality provides a mock function with given fields: speciality
func (_m *IData) UpdateSpeciality(speciality doctors.SpecialityCore) error {
	ret := _m.Called(speciality)

	var r0 error
	if rf, ok := ret.Get(0).(func(doctors.SpecialityCore) error); ok {
		r0 = rf(speciality)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
