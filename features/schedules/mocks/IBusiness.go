// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	schedules "github.com/final-project-alterra/hospital-management-system-api/features/schedules"
	mock "github.com/stretchr/testify/mock"
)

// IBusiness is an autogenerated mock type for the IBusiness type
type IBusiness struct {
	mock.Mock
}

// CancelOutpatient provides a mock function with given fields: outpatientId, userId, role
func (_m *IBusiness) CancelOutpatient(outpatientId int, userId int, role string) error {
	ret := _m.Called(outpatientId, userId, role)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int, string) error); ok {
		r0 = rf(outpatientId, userId, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateOutpatient provides a mock function with given fields: outpatient
func (_m *IBusiness) CreateOutpatient(outpatient schedules.OutpatientCore) error {
	ret := _m.Called(outpatient)

	var r0 error
	if rf, ok := ret.Get(0).(func(schedules.OutpatientCore) error); ok {
		r0 = rf(outpatient)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateWorkSchedule provides a mock function with given fields: workSchedule, q
func (_m *IBusiness) CreateWorkSchedule(workSchedule schedules.WorkScheduleCore, q schedules.ScheduleQuery) error {
	ret := _m.Called(workSchedule, q)

	var r0 error
	if rf, ok := ret.Get(0).(func(schedules.WorkScheduleCore, schedules.ScheduleQuery) error); ok {
		r0 = rf(workSchedule, q)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EditOutpatient provides a mock function with given fields: outpatient
func (_m *IBusiness) EditOutpatient(outpatient schedules.OutpatientCore) error {
	ret := _m.Called(outpatient)

	var r0 error
	if rf, ok := ret.Get(0).(func(schedules.OutpatientCore) error); ok {
		r0 = rf(outpatient)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EditWorkSchedule provides a mock function with given fields: workSchedule
func (_m *IBusiness) EditWorkSchedule(workSchedule schedules.WorkScheduleCore) error {
	ret := _m.Called(workSchedule)

	var r0 error
	if rf, ok := ret.Get(0).(func(schedules.WorkScheduleCore) error); ok {
		r0 = rf(workSchedule)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ExamineOutpatient provides a mock function with given fields: outpatientId, userId, role
func (_m *IBusiness) ExamineOutpatient(outpatientId int, userId int, role string) error {
	ret := _m.Called(outpatientId, userId, role)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int, string) error); ok {
		r0 = rf(outpatientId, userId, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindDoctorWorkSchedules provides a mock function with given fields: doctorId, q
func (_m *IBusiness) FindDoctorWorkSchedules(doctorId int, q schedules.ScheduleQuery) ([]schedules.WorkScheduleCore, error) {
	ret := _m.Called(doctorId, q)

	var r0 []schedules.WorkScheduleCore
	if rf, ok := ret.Get(0).(func(int, schedules.ScheduleQuery) []schedules.WorkScheduleCore); ok {
		r0 = rf(doctorId, q)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]schedules.WorkScheduleCore)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, schedules.ScheduleQuery) error); ok {
		r1 = rf(doctorId, q)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindNurseWorkSchedules provides a mock function with given fields: nurseId, q
func (_m *IBusiness) FindNurseWorkSchedules(nurseId int, q schedules.ScheduleQuery) ([]schedules.WorkScheduleCore, error) {
	ret := _m.Called(nurseId, q)

	var r0 []schedules.WorkScheduleCore
	if rf, ok := ret.Get(0).(func(int, schedules.ScheduleQuery) []schedules.WorkScheduleCore); ok {
		r0 = rf(nurseId, q)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]schedules.WorkScheduleCore)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, schedules.ScheduleQuery) error); ok {
		r1 = rf(nurseId, q)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOutpatientById provides a mock function with given fields: outpatientId
func (_m *IBusiness) FindOutpatientById(outpatientId int) (schedules.OutpatientCore, error) {
	ret := _m.Called(outpatientId)

	var r0 schedules.OutpatientCore
	if rf, ok := ret.Get(0).(func(int) schedules.OutpatientCore); ok {
		r0 = rf(outpatientId)
	} else {
		r0 = ret.Get(0).(schedules.OutpatientCore)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(outpatientId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOutpatients provides a mock function with given fields: q
func (_m *IBusiness) FindOutpatients(q schedules.ScheduleQuery) ([]schedules.OutpatientCore, error) {
	ret := _m.Called(q)

	var r0 []schedules.OutpatientCore
	if rf, ok := ret.Get(0).(func(schedules.ScheduleQuery) []schedules.OutpatientCore); ok {
		r0 = rf(q)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]schedules.OutpatientCore)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(schedules.ScheduleQuery) error); ok {
		r1 = rf(q)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOutpatientsByPatientId provides a mock function with given fields: patientId, q
func (_m *IBusiness) FindOutpatientsByPatientId(patientId int, q schedules.ScheduleQuery) ([]schedules.OutpatientCore, error) {
	ret := _m.Called(patientId, q)

	var r0 []schedules.OutpatientCore
	if rf, ok := ret.Get(0).(func(int, schedules.ScheduleQuery) []schedules.OutpatientCore); ok {
		r0 = rf(patientId, q)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]schedules.OutpatientCore)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, schedules.ScheduleQuery) error); ok {
		r1 = rf(patientId, q)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOutpatientsByWorkScheduleId provides a mock function with given fields: workScheduleId
func (_m *IBusiness) FindOutpatientsByWorkScheduleId(workScheduleId int) (schedules.WorkScheduleCore, error) {
	ret := _m.Called(workScheduleId)

	var r0 schedules.WorkScheduleCore
	if rf, ok := ret.Get(0).(func(int) schedules.WorkScheduleCore); ok {
		r0 = rf(workScheduleId)
	} else {
		r0 = ret.Get(0).(schedules.WorkScheduleCore)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(workScheduleId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindWorkSchedules provides a mock function with given fields: q
func (_m *IBusiness) FindWorkSchedules(q schedules.ScheduleQuery) ([]schedules.WorkScheduleCore, error) {
	ret := _m.Called(q)

	var r0 []schedules.WorkScheduleCore
	if rf, ok := ret.Get(0).(func(schedules.ScheduleQuery) []schedules.WorkScheduleCore); ok {
		r0 = rf(q)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]schedules.WorkScheduleCore)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(schedules.ScheduleQuery) error); ok {
		r1 = rf(q)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FinishOutpatient provides a mock function with given fields: outpatient, userId, role
func (_m *IBusiness) FinishOutpatient(outpatient schedules.OutpatientCore, userId int, role string) error {
	ret := _m.Called(outpatient, userId, role)

	var r0 error
	if rf, ok := ret.Get(0).(func(schedules.OutpatientCore, int, string) error); ok {
		r0 = rf(outpatient, userId, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveDoctorFutureWorkSchedules provides a mock function with given fields: doctorId
func (_m *IBusiness) RemoveDoctorFutureWorkSchedules(doctorId int) error {
	ret := _m.Called(doctorId)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(doctorId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveNurseFromNextWorkSchedules provides a mock function with given fields: nurseId
func (_m *IBusiness) RemoveNurseFromNextWorkSchedules(nurseId int) error {
	ret := _m.Called(nurseId)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(nurseId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveOutpatientById provides a mock function with given fields: outpatientId
func (_m *IBusiness) RemoveOutpatientById(outpatientId int) error {
	ret := _m.Called(outpatientId)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(outpatientId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemovePatientWaitingOutpatients provides a mock function with given fields: patientId
func (_m *IBusiness) RemovePatientWaitingOutpatients(patientId int) error {
	ret := _m.Called(patientId)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(patientId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveWorkScheduleById provides a mock function with given fields: workScheduleId
func (_m *IBusiness) RemoveWorkScheduleById(workScheduleId int) error {
	ret := _m.Called(workScheduleId)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(workScheduleId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
